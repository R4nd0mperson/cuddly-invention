{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Cell","value","this","props","isRevealed","isMine","neighbour","isFlagged","onClick","cMenu","className","onContextMenu","getValue","React","Component","Board","state","boardData","initBoardData","height","width","mines","gameStatus","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","createEmptyArray","plantMines","getNeighbours","i","j","x","y","isEmpty","randomx","randomy","minesPlanted","getRandomNumber","updatedData","mine","traverseBoard","el","setState","revealEmpty","revealBoard","alert","getHidden","length","getFlags","e","preventDefault","getMines","FlagArray","JSON","stringify","_handleCellClick","_handleContextMenu","renderBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58e769bf.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n//import './var.js';\nimport React from 'react';\n\n// Cell Class\nclass Cell extends React.Component {\n  getValue() {\n    const {value} = this.props;\n    \n    if (!value.isRevealed) {\n      return this.props.value.isFlagged ? \"ðŸš©\" : null;\n    }\n    if (value.isMine) {\n      return \"ðŸ’£\";\n    }\n    if (value.neighbour === 0) {\n      return null;\n    }\n    return value.neighbour;\n  }\n\n  render() {\n    const {value, onClick, cMenu} = this.props;\n    let className =\n      \"cell\" +\n      (value.isRevealed ? \"\" : \" hidden\") +\n      (value.isMine ? \" is-mine\" : \"\") +\n      (value.isFlagged ? \" is-flag\" : \"\");\n\n    return (\n      <div\n        onClick={onClick}\n        className={className}\n        onContextMenu={cMenu}\n      >\n        {this.getValue()}\n      </div>\n    );\n  }\n}\n\n// Board Class\nclass Board extends React.Component {\n  state = {\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\n        gameStatus: \"Game in progress\",\n        mineCount: this.props.mines,\n    };\n\n    /* Helper Functions */\n\n    // get mines\n    getMines(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isMine) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Flags\n    getFlags(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (dataitem.isFlagged) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get Hidden cells\n    getHidden(data) {\n        let mineArray = [];\n\n        data.map(datarow => {\n            datarow.map((dataitem) => {\n                if (!dataitem.isRevealed) {\n                    mineArray.push(dataitem);\n                }\n            });\n        });\n\n        return mineArray;\n    }\n\n    // get random number given a dimension\n    getRandomNumber(dimension) {\n        // return Math.floor(Math.random() * dimension);\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\n    }\n\n    // Gets initial board data\n    initBoardData(height, width, mines) {\n        let data = this.createEmptyArray(height, width);\n        data = this.plantMines(data, height, width, mines);\n        data = this.getNeighbours(data, height, width);\n        return data;\n    }\n    createEmptyArray(height, width) {\n        let data = [];\n\n        for (let i = 0; i < height; i++) {\n            data.push([]);\n            for (let j = 0; j < width; j++) {\n                data[i][j] = {\n                    x: i,\n                    y: j,\n                    isMine: false,\n                    neighbour: 0,\n                    isRevealed: false,\n                    isEmpty: false,\n                    isFlagged: false,\n                };\n            }\n        }\n        return data;\n    }\n\n    // plant mines on the board\n    plantMines(data, height, width, mines) {\n        let randomx, randomy, minesPlanted = 0;\n\n        while (minesPlanted < mines) {\n            randomx = this.getRandomNumber(width);\n            randomy = this.getRandomNumber(height);\n            if (!(data[randomx][randomy].isMine)) {\n                data[randomx][randomy].isMine = true;\n                minesPlanted++;\n            }\n        }\n\n        return (data);\n    }\n\n    // get number of neighbouring mines for each board cell\n    getNeighbours(data, height, width) {\n        let updatedData = data, index = 0;\n\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                if (data[i][j].isMine !== true) {\n                    let mine = 0;\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\n                    area.map(value => {\n                        if (value.isMine) {\n                            mine++;\n                        }\n                    });\n                    if (mine === 0) {\n                        updatedData[i][j].isEmpty = true;\n                    }\n                    updatedData[i][j].neighbour = mine;\n                }\n            }\n        }\n\n        return (updatedData);\n    };\n\n    // looks for neighbouring cells and returns them\n    traverseBoard(x, y, data) {\n        const el = [];\n\n        //up\n        if (x > 0) {\n            el.push(data[x - 1][y]);\n        }\n\n        //down\n        if (x < this.props.height - 1) {\n            el.push(data[x + 1][y]);\n        }\n\n        //left\n        if (y > 0) {\n            el.push(data[x][y - 1]);\n        }\n\n        //right\n        if (y < this.props.width - 1) {\n            el.push(data[x][y + 1]);\n        }\n\n        // top left\n        if (x > 0 && y > 0) {\n            el.push(data[x - 1][y - 1]);\n        }\n\n        // top right\n        if (x > 0 && y < this.props.width - 1) {\n            el.push(data[x - 1][y + 1]);\n        }\n\n        // bottom right\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\n            el.push(data[x + 1][y + 1]);\n        }\n\n        // bottom left\n        if (x < this.props.height - 1 && y > 0) {\n            el.push(data[x + 1][y - 1]);\n        }\n\n        return el;\n    }\n\n    // reveals the whole board\n    revealBoard() {\n        let updatedData = this.state.boardData;\n        updatedData.map((datarow) => {\n            datarow.map((dataitem) => {\n                dataitem.isRevealed = true;\n            });\n        });\n        this.setState({\n            boardData: updatedData\n        })\n    }\n\n    /* reveal logic for empty cell */\n    revealEmpty(x, y, data) {\n        let area = this.traverseBoard(x, y, data);\n        area.map(value => {\n            if (!value.isFlagged && !value.isRevealed && (value.isEmpty || !value.isMine)) {\n                data[value.x][value.y].isRevealed = true;\n                if (value.isEmpty) {\n                    this.revealEmpty(value.x, value.y, data);\n                }\n            }\n        });\n        return data;\n\n    }\n\n    // Handle User Events\n\n    _handleCellClick(x, y) {\n\n        // check if revealed. return if true.\n        if (this.state.boardData[x][y].isRevealed || this.state.boardData[x][y].isFlagged) return null;\n\n        // check if mine. game over if true\n        if (this.state.boardData[x][y].isMine) {\n            this.setState({gameStatus: \"You Lost.\"});\n            this.revealBoard();\n            alert(\"game over\");\n        }\n\n        let updatedData = this.state.boardData;\n        updatedData[x][y].isFlagged = false;\n        updatedData[x][y].isRevealed = true;\n\n        if (updatedData[x][y].isEmpty) {\n            updatedData = this.revealEmpty(x, y, updatedData);\n        }\n\n        if (this.getHidden(updatedData).length === this.props.mines) {\n            this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n            this.revealBoard();\n            alert(\"You Win\");\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\n        });\n    }\n\n    _handleContextMenu(e, x, y) {\n        e.preventDefault();\n        let updatedData = this.state.boardData;\n        let mines = this.state.mineCount;\n\n        // check if already revealed\n        if (updatedData[x][y].isRevealed) return;\n\n        if (updatedData[x][y].isFlagged) {\n            updatedData[x][y].isFlagged = false;\n            mines++;\n        } else {\n            updatedData[x][y].isFlagged = true;\n            mines--;\n        }\n\n        if (mines === 0) {\n            const mineArray = this.getMines(updatedData);\n            const FlagArray = this.getFlags(updatedData);\n            if (JSON.stringify(mineArray) === JSON.stringify(FlagArray)) {\n                this.setState({mineCount: 0, gameStatus: \"You Win.\"});\n                this.revealBoard();\n                alert(\"You Win\");\n            }\n        }\n\n        this.setState({\n            boardData: updatedData,\n            mineCount: mines,\n        });\n    }\n\n    renderBoard(data) {\n        return data.map((datarow) => {\n            return datarow.map((dataitem) => {\n                return (\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\n                        <Cell\n                            onClick={() => this._handleCellClick(dataitem.x, dataitem.y)}\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\n                            value={dataitem}\n                        />\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\n                    </div>);\n            })\n        });\n\n    }\n\n  render() {\n        return (\n            <div className=\"board\">\n                <div className=\"game-info\">\n                    <h1 className=\"info\">{this.state.gameStatus}</h1>\n                    <span className=\"info\">Mines remaining: {this.state.mineCount}</span>\n                </div>\n                {\n                    this.renderBoard(this.state.boardData)\n                }\n            </div>\n        );\n    }\n}\n\n// Game Class\nclass App extends React.Component {\n  state = {\n    height: 8,\n    width: 8,\n    mines: 10\n  };\n\n  render() {\n    const { height, width, mines } = this.state;\n    return (\n      <div className=\"game\">\n        <Board height={height} width={width} mines={mines} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}